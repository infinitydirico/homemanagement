@using ChartJs.Blazor.Charts
@using ChartJs.Blazor.ChartJS.PieChart
@using ChartJs.Blazor.ChartJS.Common.Properties
@using ChartJs.Blazor.Util
@using HomeManagement.API.WebApp.Services
@using HomeManagement.Models
@using  ChartJs.Blazor.ChartJS.Common
@using ChartJs.Blazor.ChartJS.BarChart
@using ChartJs.Blazor.ChartJS.BarChart.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes
@using ChartJs.Blazor.ChartJS.Common.Axes.Ticks
@using ChartJs.Blazor.ChartJS.Common.Wrappers

@inject RestClient RestClient
@inject AuthenticationStateProvider AuthenticationStateProvider

@if (_config != null)
{
    <ChartJsBarChart @ref="_pieChartJs" Config="@_config" Height="300" />
}
else
{
    <MatProgressBar Indeterminate="true" Closed="_config == null"></MatProgressBar>
}

@code {

    private BarConfig _config;
    private ChartJsBarChart _pieChartJs;

    protected override async Task OnInitializedAsync()
    {
        var state = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = state.User;

        var chartData = await RestClient.GetAsync<OverPricedCategories>($"account/toptransactions/{DateTime.Now.Month}");

        _config = new BarConfig
        {
            Options = new BarOptions
            {
                Title = new OptionsTitle
                {
                    Display = false,
                    Text = "Most expensive Categories"
                },
                Responsive = true
            }
        };

        _config.Data.Labels.AddRange(chartData.Categories.Select(x => x.Category.Name));

        var set = new BarDataset<DoubleWrapper>
        {
            BackgroundColor = CreateColors(chartData.Categories.Count),
            BorderWidth = 0,
            HoverBackgroundColor = ColorUtil.RandomColorString(),
            HoverBorderColor = ColorUtil.RandomColorString(),
            HoverBorderWidth = 1,
            BorderColor = "#ffffff",
            Label = $"Most expensive categories on : {DateTime.Now.ToShortDateString()}"
        };

        set.AddRange(chartData.Categories.Select(x => x.Price).Wrap());
        _config.Data.Datasets.Add(set);
    }

    private IndexableOption<string> CreateColors(int length)
    {
        var colors = new List<string>();

        for (int i = 0; i < length; i++)
        {
            colors.Add(ColorUtil.RandomColorString());
        }

        return colors.ToArray();
    }
}
